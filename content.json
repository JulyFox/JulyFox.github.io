[{"title":"JS数据结构——排序算法","date":"2020-03-28T02:38:44.000Z","path":"2020/03/28/JS数据结构——排序算法/","text":"","comments":true,"tags":[]},{"title":"JS数据结构——二叉树","date":"2020-03-28T02:38:25.000Z","path":"2020/03/28/JS数据结构——二叉树/","text":"","comments":true,"tags":[]},{"title":"JS数据结构——链表","date":"2020-03-28T02:37:29.000Z","path":"2020/03/28/JS数据结构——链表/","text":"","comments":true,"tags":[]},{"title":"JS数据结构——队列","date":"2020-03-28T02:36:43.000Z","path":"2020/03/28/JS数据结构——队列/","text":"","comments":true,"tags":[]},{"title":"JS数据结构——栈","date":"2020-03-28T02:35:36.000Z","path":"2020/03/28/JS数据结构——栈/","text":"JS栈的定义：栈(Stack)又名堆栈，它是一种运算受限的线性表。限定仅在表尾进行插入和删除操作的线性表。这一端被称为栈顶，相对地另一端称为栈底。栈是一种后进先出（LIFO）的有序集合。 栈就像在一个桶里放盘子，最上面的盘子就相当于是栈顶，后来的盘子只能放在栈顶（就相当于入栈操作），若要取盘子也只能取最上面的盘子（出栈）。 创建一个基于数组的Stack类12345678910111213141516171819202122232425262728class Stack&#123; constructor()&#123; this.items = []; &#125; push(element)&#123; //向栈添加元素 this.items.push(element); &#125; pop()&#123; //从栈移除元素 this.items.pop(); &#125; peek()&#123; //查看栈顶元素 return this.items[this.items.length - 1]; &#125; isEmpty()&#123; //检查栈是否为空 空为true 不空为false return this.items.length === 0; &#125; clear()&#123; //清空栈元素 this.items = []; &#125; size()&#123; //返回栈里的元素个数 return this.items.length; &#125;&#125;const stack = new Stack();console.log(stack.isEmpty());//输出为truestack.push(1);stack.push(2);console.log(stack.peek());//2 创建一个基于JS对象的Stack类1234567891011121314151617181920212223242526272829303132333435363738394041424344class Stack&#123; constructor() &#123; this.count = 0; this.items = &#123;&#125;; &#125; push(element)&#123; this.items[this.count] = element; this.count++; &#125; size()&#123; return this.count; &#125; isEmpty()&#123; return this.count === 0; &#125; pop()&#123; if(this.isEmpty())&#123; return undefined; &#125; this.count--; let result = this.items[this.count]; delete this.items[this.count]; return result; &#125; peek()&#123; if(this.isEmpty())&#123; return undefined; &#125; return this.items[this.count -1]; &#125; clear()&#123; this.items = &#123;&#125;; this.count = 0; &#125;&#125;new stack = new Stack();stack.push(5);stack.push(3);//对象为键值对形式 //此时items和count//items = &#123;// 0: 5,// 1: 3//&#125;;//count = 2;","comments":true,"tags":[]},{"title":"JS数据结构——数组","date":"2020-03-28T02:28:45.000Z","path":"2020/03/28/JS数据结构——数组/","text":"JS数组的定义数组的标准定义是：一个存储元素的线性集合，元素可以通过索引来任意存取，索引通常是数字，用来计算元素之间存储位置的偏移量。JS数组是无类型的：数组元素可以是任意类型，并且同一个数组中的不同元素也可以有不同的类型。数组的元素可以是对象或者是其他数组。 Js的数组是动态的：根据需要会自增或自减，创建时无需声明固定的大小；Js数组也可能数稀疏的：数组元素索引不一定要连续，它们之间可以有空缺。 创建数组1234567var arr = [];//没有元素var arr1 = [2,3.3,\"a\",true];//不同类型元素var n = 1;var arr2 = [n, n+1, n+2];//元素为任意表达式var arr3 = [[1,&#123;x:1,y:2&#125;],[2,&#123;x:3,y:4&#125;]];//元素包含对象var arr4 = [1,,2];//3个元素，1个为undefinedvar arr5 = [,,,]//3个元素都为undefined 存取函数 indexOf() join()和toString() concat()和splice() 可变函数 push()和unshift() pop()和shift() splice() sort()和reverse() 迭代器方法不生成新数组的迭代器方法： forEach() every() some() reduce() 生成新数组的迭代器方法： map() filter() 二维数组和多维数组","comments":true,"tags":[]},{"title":"Hello World","date":"2020-03-26T13:51:26.456Z","path":"2020/03/26/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","comments":true,"tags":[]}]